package com.xtjun.xpForwardSms.xp.hook.phone;import static com.xtjun.xpForwardSms.xp.hook.sms.SmsHandlerHook.SELF_PACKAGE;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.os.Handler;import android.os.Looper;import android.telephony.TelephonyManager;import android.text.TextUtils;import com.xtjun.xpForwardSms.common.action.entity.SmsMsg;import com.xtjun.xpForwardSms.common.constant.MPrefConst;import com.xtjun.xpForwardSms.common.msp.MultiProcessSharedPreferences;import com.xtjun.xpForwardSms.common.utils.JsonUtils;import com.xtjun.xpForwardSms.common.utils.StringUtils;import com.xtjun.xpForwardSms.common.utils.XLog;import com.xtjun.xpForwardSms.common.utils.XSPUtils;import com.xtjun.xpForwardSms.ui.app.ForwardSmsApplication;import com.xtjun.xpForwardSms.xp.hook.BaseHook;import com.xtjun.xpForwardSms.xp.hook.sms.action.impl.ForwardSmsAction;import java.util.ArrayList;import java.util.List;import java.util.regex.Matcher;import java.util.regex.Pattern;import de.robv.android.xposed.XC_MethodHook;import de.robv.android.xposed.XC_MethodReplacement;import de.robv.android.xposed.XposedHelpers;import de.robv.android.xposed.callbacks.XC_LoadPackage;/** * Hook class ModuleUtils */public class PhoneHook extends BaseHook {    private static final String XIAOMI_AI_CALL = "com.xiaomi.aiasst.service";    private static final String CLASS_PhoneBroadcastReceiver = "com.xiaomi.aiasst.service.receiver.PhoneBroadcastReceiver";    private static final String CLASS_DBAICallDao = "com.xiaomi.aiasst.service.aicall.callrecordsdb.DBAICallDao";    private static final String CLASS_AICallInfo = "com.xiaomi.aiasst.service.aicall.model.AICallInfo";    private static final String CLASS_ListData = "com.xiaomi.aiasst.service.aicall.model.ListData";    private int curChannelId = 0;    @Override    public void onLoadPackage(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable {        if (XIAOMI_AI_CALL.equals(lpparam.packageName)) {            try {                XLog.i("Hooking current Xposed module status...");                hookAICallDB(lpparam);                hookAIDBDao(lpparam);            } catch (Throwable e) {                XLog.e("Failed to hook current Xposed module status.");            }        }    }    private void hookAIDBDao(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable {        XposedHelpers.findAndHookMethod(CLASS_DBAICallDao, lpparam.classLoader, "insertAICallInfo", lpparam.classLoader.loadClass(CLASS_AICallInfo), new XC_MethodHook() {            @Override            protected void beforeHookedMethod(MethodHookParam param) throws Throwable {                Object o = param.args[0];                int channelId = XposedHelpers.getIntField(o, "channelId");                String comenumber = (String) XposedHelpers.getObjectField(o, "comenumber");                String date = (String) XposedHelpers.getObjectField(o, "date");                String unReadContentText = (String) XposedHelpers.getObjectField(o, "unReadContentText");                print("insertAICallInfo  " + channelId + "  " + comenumber + " " + date + " " + unReadContentText) ;                curChannelId = channelId;            }            @Override            protected void afterHookedMethod(MethodHookParam param) throws Throwable {            }        });        XposedHelpers.findAndHookMethod(CLASS_DBAICallDao, lpparam.classLoader, "insertAICallInfoWithSilent", lpparam.classLoader.loadClass(CLASS_AICallInfo), new XC_MethodHook() {            @Override            protected void beforeHookedMethod(MethodHookParam param) throws Throwable {                Object o = param.args[0];                int channelId = XposedHelpers.getIntField(o, "channelId");                String comenumber = (String) XposedHelpers.getObjectField(o, "comenumber");                String date = (String) XposedHelpers.getObjectField(o, "date");                String unReadContentText = (String) XposedHelpers.getObjectField(o, "unReadContentText");                print("insertAICallInfoWithSilent  " + channelId + "  " + comenumber + " " + date + " " + unReadContentText) ;                curChannelId = channelId;            }            @Override            protected void afterHookedMethod(MethodHookParam param) throws Throwable {            }        });    }    private void hookAICallDB(XC_LoadPackage.LoadPackageParam lpparam) throws Throwable {        XposedHelpers.findAndHookMethod(CLASS_PhoneBroadcastReceiver, lpparam.classLoader,                "onReceive",                Context.class, Intent.class, new XC_MethodHook() {                    @Override                    protected void beforeHookedMethod(MethodHookParam param) throws Throwable {                    }                    @Override                    protected void afterHookedMethod(MethodHookParam param) throws Throwable {                        final Context context = (Context) param.args[0];                        Intent intent = (Intent) param.args[1];                        if (intent == null) {                            print("PhoneBroadcastReceiver intent is null");                            return;                        }                        String action = intent.getAction();                        print("PhoneBroadcastReceiver action:" + action);                        if ("android.intent.action.NEW_OUTGOING_CALL".equals(action)) {                                                   }                        if ("android.intent.action.PHONE_STATE".equals(action)) {                            String stringExtra = intent.getStringExtra("state");                            if (TextUtils.isEmpty(stringExtra)) {                                //print("callState is null");                            } else if (TelephonyManager.EXTRA_STATE_RINGING.equals(stringExtra)) {                                //print("PhoneBroadcastReceiver EXTRA_STATE_RINGING");                            } else if (TelephonyManager.EXTRA_STATE_OFFHOOK.equals(stringExtra)) {                                //print("EXTRA_STATE_OFFHOOK");                            } else if (TelephonyManager.EXTRA_STATE_IDLE.equals(stringExtra)) {                                //print("CALL_STATE_IDLE from BroadcastReceiver");                                Thread.sleep(1000);                                if (curChannelId > 0) {                                    Object dbdao = XposedHelpers.newInstance(lpparam.classLoader.loadClass(CLASS_DBAICallDao), context.getApplicationContext());                                    Object o = XposedHelpers.callMethod(dbdao, "loadAICallInfoByChannelId", curChannelId);                                    int channelId = XposedHelpers.getIntField(o, "channelId");                                    String comenumber = (String) XposedHelpers.getObjectField(o, "comenumber");                                    String date = (String) XposedHelpers.getObjectField(o, "date");                                    String unReadContentText = (String) XposedHelpers.getObjectField(o, "unReadContentText");                                    List<Object> listData = (ArrayList<Object>) XposedHelpers.getObjectField(o, "listData");                                    StringBuilder stringBuilder = new StringBuilder();                                    for (Object oo: listData) {                                        String content = (String) XposedHelpers.getObjectField(oo, "content");                                        int flag = XposedHelpers.getIntField(oo, "flag");                                        if (filterFlagText(flag)) {                                            String flagtext = getFlagText(flag);                                            stringBuilder.append(flagtext).append(":").append(content).append("\n");                                        }                                        //String ss = (String) XposedHelpers.callMethod(oo, "toString");                                        //print("EXTRA_STATE_RINGING from BroadcastReceiver  to string " + ss);                                    }                                    print("EXTRA_STATE_RINGING from BroadcastReceiver  \n" + stringBuilder.toString());                                    sendMsg(context, comenumber, stringBuilder.toString());                                    curChannelId = 0;                                }                            }                        }                    }                });    }        private static void print(String msg) {        XLog.d(msg);    }    private String getFlagText(int flag) {        switch (flag) {            case 1:                return "Send";            case 2:                return "Rece";            case 3:                return "AutoAnswer";            case 4:                return "SYSTEMCALLVOICE";            case 5:                return "AM";            default:                return "other";        }    }    private boolean filterFlagText(int flag) {        return flag == 1 || flag == 2;    }    private void sendMsg(Context context, String sender, String body) {        Context mAppContext = null;        try {            mAppContext = context.createPackageContext(SELF_PACKAGE, Context.CONTEXT_IGNORE_SECURITY);        } catch (PackageManager.NameNotFoundException e) {            throw new RuntimeException(e);        }        if (mAppContext == null) {            print("mAppContext but mAppContext = null");            return;        }        SharedPreferences sp = MultiProcessSharedPreferences.getSharedPreferences(mAppContext, MPrefConst.SP_NAME, Context.MODE_PRIVATE);        SmsMsg smsMsg = new SmsMsg();        smsMsg.setSender(sender);        smsMsg.setBody(body);        smsMsg.setDate(System.currentTimeMillis());        new Thread(new Runnable() {            @Override            public void run() {                ForwardSmsAction.forwardSmsMsg(smsMsg, sp);            }        }).start();    }}